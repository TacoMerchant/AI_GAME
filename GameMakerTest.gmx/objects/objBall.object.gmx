<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_ball</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.15;
alarm[0] = 1; //update currentNode alarm
currentNode = noone;
gotoNode = noone;
moveSpeed = 5;
followPath = noone; //list that will contain the nodes to the shortest route
inital_counter = 25;
counter = inital_counter;
dec_counter = 1;
counter_limit = 15;

pathing = false;
finished_current_path = true;

start_x = x;
start_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentNode = getNodeAt(x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((pathing == false) &amp;&amp; (finished_current_path == true)){
    speed = 2;
    move_bounce_solid(true);
}



if ((obj_mobCannon1.can_shoot == true)|| (obj_mobCannon2.can_shoot == true) || (obj_mobCannon3.can_shoot == true) || (obj_mobCannon4.can_shoot == true)|| (obj_mobCannon5.can_shoot == true)|| (obj_mobCannon6.can_shoot == true))
{
    pathing = true;
}



//Move
if (pathing == true) {
//if (mouse_check_button_pressed(mb_right)) {
    if (counter == inital_counter){
        counter -= dec_counter;
        var newDestination;
        newDestination = getNodeAt(obj_player.x, obj_player.y);
    
        if (newDestination != noone &amp;&amp; newDestination != currentNode) {
        finished_current_path = false;
        gotoNode = newDestination;
            with (objMap) {
                var newPath;
                newPath = getShortestPath(getNodeAt(other.x, other.y), other.gotoNode);
                if (newPath != noone) {
                    //Path found, update followPath
                    other.followPath = newPath;
                }
            }
        }
    }
//}
}
pathing = false;
counter -= dec_counter;
if (counter &lt; counter_limit){
    counter = inital_counter;
}


if (finished_current_path == false) {
    if (followPath != noone &amp;&amp; currentNode != gotoNode) {
        var nextNode, lastNode;
        nextNode = ds_list_find_value(followPath, 0);
        
        var xx, yy;
        xx = getNodeX(nextNode) + global.NodeSize/2;
        yy = getNodeY(nextNode) + global.NodeSize/2;
        
        direction = point_direction(x, y, xx, yy);
        speed = moveSpeed;
        
        if (ds_list_size(followPath) == 1) {
        //This is last node
            if (round(x) = xx &amp;&amp; round(y) == yy) {
                x = xx;
                y = yy;
                speed = 0;
                gotoNode = noone;
                ds_list_destroy(followPath);
                followPath = noone;
                currentNode = getNodeAt(x, y);
                finished_current_path = true;
            } else {
                //Smooth stopping
                speed = min(moveSpeed, abs(point_distance(x, y, xx, yy)/7));
                finished_current_path = true;
            }
        } else {
            //Remove this node from path
            if (distance_to_point(xx, yy) &lt; moveSpeed) {
                ds_list_delete(followPath, 0);
            }
        }
     } 
}




/*
//////////////////////////////////////////////
//Move
if ((obj_mobCannon1.can_shoot == true)|| (obj_mobCannon2.can_shoot == true) || (obj_mobCannon3.can_shoot == true) ) {
//if (mouse_check_button_pressed(mb_right)) {
    pathing = true; //
    if (counter == inital_counter){
        counter -= dec_counter;
        var newDestination;
        newDestination = getNodeAt(obj_player.x, obj_player.y);
    
        if (newDestination != noone &amp;&amp; newDestination != currentNode) {
        gotoNode = newDestination;
            with (objMap) {
                var newPath;
                newPath = getShortestPath(getNodeAt(other.x, other.y), other.gotoNode);
                if (newPath != noone) {
                    //Path found, update followPath
                    other.followPath = newPath;
                }
            }
        }
    }
//}
}



counter -= dec_counter;

if (counter &lt; counter_limit){
    counter = inital_counter;
}

if (followPath != noone &amp;&amp; currentNode != gotoNode) {
    var nextNode, lastNode;
    nextNode = ds_list_find_value(followPath, 0);
    
    var xx, yy;
    xx = getNodeX(nextNode) + global.NodeSize/2;
    yy = getNodeY(nextNode) + global.NodeSize/2;
    
    direction = point_direction(x, y, xx, yy);
    speed = moveSpeed;
    
    if (ds_list_size(followPath) == 1) {
    //This is last node
        if (round(x) = xx &amp;&amp; round(y) == yy) {
            x = xx;
            y = yy;
            speed = 0;
            gotoNode = noone;
            ds_list_destroy(followPath);
            followPath = noone;
            currentNode = getNodeAt(x, y);
        } else {
            //Smooth stopping
            speed = min(moveSpeed, abs(point_distance(x, y, xx, yy)/7));
        }
    } else {
        //Remove this node from path
        if (distance_to_point(xx, yy) &lt; moveSpeed) {
            ds_list_delete(followPath, 0);
        }
    }
 } 
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_alpha(1);
draw_set_color(c_white);
draw_text(5, 5, "Press 'D' to enable/disable debugging#Right-click to move");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

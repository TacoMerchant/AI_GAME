<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objDebug.visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw nodes
var xx, yy, nodeID;
draw_set_color(c_red);
draw_set_alpha(0.5);
with(objMap) {
    for(yy = 0; yy &lt; room_height div global.NodeSize; yy+=1) {
        for(xx = 0; xx &lt; room_width div global.NodeSize; xx+=1) {
            if (nodes[xx, yy] == noone) {
                continue;
            }
            
            nodeID = yy * (room_width div global.NodeSize) + xx;
            draw_circle(getNodeX(nodeID) + global.NodeSize/2, getNodeY(nodeID) + global.NodeSize/2, 2, false);
        }
    }
}

var path;
path = objBall.followPath;

if (path == noone) {
    exit;
}
draw_set_alpha(0.75);
var previousX, previousY;
for(i = 0; i &lt; ds_list_size(path); i+=1) {
    xx = getNodeX(ds_list_find_value(path, i)) + global.NodeSize/2;
    yy = getNodeY(ds_list_find_value(path, i)) + global.NodeSize/2;
    xx = round(xx); yy = round(yy);
    
    if (i &gt; 0) {
        draw_set_color(c_yellow);
        draw_line(previousX, previousY, xx, yy);
    }

    previousX = xx;
    previousY = yy;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw text
draw_set_color(c_white);
draw_set_alpha(1);
draw_text(5, 40, "Current Node: " + string(getNodeAt(objBall.x, objBall.y)) + "#Destination Node: " + string(objBall.gotoNode));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera_safe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Created by SlasherX
As seen on SlasherXGAMES
https://www.youtube.com/user/SlasherXGAMES
*/

//This turret determines when the best time to shoot occurs
/*
if (room != rm_gameWorld)
{
    x = room_width/2;
    y = room_height/2 + 15;
}
*/
los = 300;//the line of sight of the turret, 300 pixels
rspeed = 5;//the speed at which the turret rotates
distance_to_player = 5000;//distance between the turret and player
active = false;//turret inactive at start
//global.can_shoot = false;//disable shooting on start
ANG = 0;//set angle between player and turret to 0 on start
//set point of interest to the right hand side
xPointOfInterest = x + 1;
yPointOfInterest = y;
image_speed = 0;
can_shoot = false;//disable shooting on start
ammo = 1000000000;
lenX = 165;
lenY = 0;
cool_off = false;
safe_spd = 0.00;
not_safe_spd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cool_off = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distance_to_player = sqrt(sqr(x - obj_player.x) + sqr(y - obj_player.y));//update the distance to player

//get the player's dimensions which can then be used to figure
//out the best angle to start shooting at
player_width = sprite_get_width(obj_player.sprite_index);
player_height = sprite_get_height(obj_player.sprite_index);
player_average_size = 5*(player_width + player_height) /2;

//Check if player is within the turret's line of sight
//AND not behind an obstruction
if (distance_to_player &lt;= los) &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,obj_wall,false,true)
{
    xPointOfInterest = obj_player.x;//update x point of interest with player's x coordinate
    yPointOfInterest = obj_player.y;//update y point of interest with player's y coordinate

    active = true;//become active
    sprite_index = spr_camera_not_safe;
    image_speed = not_safe_spd;
}
else//otherwise
{
    active = false;//deactivate
    sprite_index = spr_camera_safe;
    image_speed = safe_spd;
}

ANG = point_direction(x, y, obj_player.x, obj_player.y) - image_angle;

if (ANG &gt;= 360)//if the angle ever goes over 360
{
    ANG = ANG mod 360;//minus 360 from it. 361 degrees becomes 1 degree, 400 becomes 40, etc
}

if (active == true)//if active
{ 
    if (ANG &lt; (player_average_size/4) || ANG &gt; (360 - player_average_size/4))//work out if the player is is an acceptable angle away from the turret's gun on either side of its direction
    {
        can_shoot = true;//enable shooting
        image_speed = safe_spd;
    }
    else//otherwise
    {
        can_shoot = false;//continue to deactivate shooting
    }
}
else
{
    can_shoot = false;
}
/*
if (can_shoot == false)
{
    if (image_speed &gt; 0)
    {
        image_speed -= 0.2;
    }
}
*/

pointdir = point_direction(x, y, xPointOfInterest, yPointOfInterest);//find the last known direction to the player
image_angle += sin(degtorad(pointdir - image_angle)) * rspeed;//rotate smoothly

//here's the juicy bit!
if ((can_shoot == true) &amp;&amp; (ammo &gt; 0) &amp;&amp; (cool_off == false))//if this turret is allowed to shoot
{
    /*
    ammo -= 1;
    var bullet_id;
    bullet_id = instance_create(x + lengthdir_x(lenX, image_angle) - lengthdir_y(lenY, image_angle),//create a bullet
                        y + lengthdir_y(lenX, image_angle) + lengthdir_x(lenY, image_angle),obj_light);
    bullet_id.direction = image_angle;
    bullet_id.image_angle = bullet_id.direction;
    bullet_id.speed = 0;
    cool_off = true;
    alarm[0] = room_speed * 0.2;//pause for a moment
    */
    image_speed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Code here is purely cosmetic and/or for debug reasons
//draw_set_halign(fa_center);
//draw_set_valign(fa_center);

draw_self();

if (active == true)
{   
    //draw_text_color(x, y-80, string(distance_to_player), c_red, c_red, c_red, c_red, 1);
    
    if (can_shoot == true)
    {
        draw_line_color(x, y, obj_player.x, obj_player.y, c_red, c_red);
        //draw_text_color(x, y-60, string(ANG), c_red, c_red, c_red, c_red, 1);
    }
    else
    {
        draw_line_color(x, y, obj_player.x, obj_player.y, c_white , c_white);
        //draw_text_color(x, y-60, string(ANG), c_black, c_black, c_black, c_black, 1);
    }
}
else
{
    //draw_text_color(x, y-80, string(distance_to_player), c_black, c_black, c_black, c_black, 1);
}

draw_set_color(c_white);
draw_circle(x, y, los, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

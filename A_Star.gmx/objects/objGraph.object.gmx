<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initializeGraph();

global.NodeRadius = 25;  //the radius of the circles that represent the nodes
global.NodeDragging = noone; //node being dragged
global.ShortestPath = noone; //previous shortest path computed (ds_list)
global.Path = ""; //the nodes in the path as a string

global.LineFromNode = noone;
global.PathLineFromNode = noone;

//Create an objNode and set its nodeID to a new node
(instance_create(50, 200, objNode)).nodeID = newNode();

/*
A small example on how to use this:

//Create 6 nodes and store their IDs in an array
for(i = 0; i &lt; 6; i+=1) {
nodes[i] = newNode();
}

//Connect them in a way (Node: You don't have to connect both sides)
connectNodes(nodes[0], nodes[1], 17);
connectNodes(nodes[0], nodes[2], 34);
connectNodes(nodes[0], nodes[5], 14);
connectNodes(nodes[1], nodes[2], 30);
connectNodes(nodes[2], nodes[3], 28);
connectNodes(nodes[5], nodes[4], 14);
connectNodes(nodes[4], nodes[3], 15);

//Get the shortest path between node3 and node1
path = getShortestPath(nodes[3], nodes[1]);

//If noone is returned, it means the path has not been found
if (path == noone) {
    show_message("Path not found")
} else {
    //Loop through the list returned, and get each node in the path
    for(i = 0; i &lt; ds_list_size(path); i+=1) {
        show_message(ds_list_find_value(path, i));
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_left) &amp;&amp; global.NodeDragging == noone) {
    var newNodeID;
    newNodeID = newNode();
    (instance_create(mouse_x, mouse_y, objNode)).nodeID = newNodeID;
    global.NodeDragging = newNodeID;
}

if (mouse_check_button_released(mb_left)) {
    global.NodeDragging = noone;
}

if (keyboard_check_released(vk_space)) {
    global.LineFromNode = noone;
}

if (keyboard_check_released(vk_shift)) {
    global.PathLineFromNode = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fDefault);
draw_set_color(c_black);
draw_text(5, 5, "Press R to go to the next room#Left-Click to add a node at mouse location#Righ-Click a node to delete it#Drag node to move its location#Move cursor over a node, hold space, move cursor to another node and then release space to connect the two nodes#Move cursor over a node, hold shift, move cursor to another node and then release shift to find shortest path between the two nodes#" + global.Path);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
